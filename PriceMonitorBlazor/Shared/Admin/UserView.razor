@inject PriceMonitorData.UserRepository db

@inject UserManager<IdentityUser> _UserManager

@inject RoleManager<IdentityRole> _RoleManager



<div class="row">
    <div class="col-12">
        <div class="card">
            @if (user == null)
            {
            <span class="text-secondary">Loading...</span>
            }
            else
            {
                <div class="card-body">
                    <form>
                        <div class="form-group">
                            <label for="username" class="control-label">UserName</label>
                            <input readonly @bind="@user.UserName" class="form-control" id="username" placeholder="username" />
                        </div>
                        <div class="form-group">
                            <label for="email" class="control-label">Email</label>
                            <input readonly @bind="@user.Email" class="form-control" id="email" placeholder="email" />
                        </div>
                        <div class="form-group">
                            <label for="role" class="control-label">Roles</label>
                            <input readonly @bind="@user.FlattenRoleNames" class="form-control" id="role" placeholder="" />
                        </div>
                    </form>
                    @if (user.FlattenRoleNames != null && user.FlattenRoleNames.Contains("Admin"))
                    {
                        <div class="form-group">
                            <div class="col-sm-offset-2 col-sm-10">
                                <button class="btn btn-danger" @onclick="RemoveAdminRole">Remove Admin Role</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            <div class="col-sm-offset-2 col-sm-10">
                                <button class="btn btn-danger" @onclick="AddAdminRole">Add Admin Role</button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<br />

@if (user != null)
{
    <h5>Add Item To User</h5>
    <AddItemToEmail Email="@(user.Email)" />
}

<br />

@if (user != null)
{
    <h5>User's Items</h5>
    <ItemsList Email="@(user.Email)" />
}

@code {
    [Parameter]
    public string UserId { get; set; }

    private Mobsites.AspNetCore.Identity.Cosmos.IdentityUser user;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (user == null)
        {
            await LoadUser();
        }
    }

    async Task LoadUser()
    {
        try
        {
            user = await db.GetUserByIdAsync(UserId);
        }
        catch (Exception ex)
        {
            user = new Mobsites.AspNetCore.Identity.Cosmos.IdentityUser()
            {
                UserName = ex.Message
            };
        }

        this.StateHasChanged();
    }

    async Task AddAdminRole()
    {
        if (user != null)
        {
            var UserResult = await _UserManager.IsInRoleAsync(user, "Admin");

            if (!UserResult)
            {
                await _UserManager.AddToRoleAsync(user, "Admin");

                await LoadUser();
            }
        }
    }
    async Task RemoveAdminRole()
    {
        if (user != null)
        {
            var UserResult = await _UserManager.IsInRoleAsync(user, "Admin");

            if (UserResult)
            {
                //This command does not completely remove a role: not deleting info in IdentityUser properties (FlattenRoleIds, FlattenRoleNames)
                //await _UserManager.RemoveFromRoleAsync(user, "Admin");

                user = await db.RemoveUserFromRoleAsync(user, "Admin");

                this.StateHasChanged();
            }
        }
    }
}
