@inject PriceRepository pricesdb
@inject ItemRepository itemsdb

<div class="row">
    <div class="table-responsive">
        <div class="card">

            @if (orderedItemPrices == null)
            {
                <span class="text-secondary">Loading...</span>
            }
            else if (orderedItemPrices.Length == 0)
            {
                <span class="text-secondary">
                    <em>There is no items...</em>
                    <a href="AddItem">Add New!</a>
                </span>
            }
            else
            {
                <table class="table table-sm table-striped">
                    <thead class="card-header">
                        <tr>
                            <th>Update Time</th>
                            <th>Item Name</th>
                            <th>Last Price</th>
                            <th>URL</th>
                        </tr>
                    </thead>
                    <tbody class="card-body">
                        @for (int i = 0; i < orderedItemPrices.Length; ++i)
                        {
                            <tr>
                                <td>
                                    @orderedItemPrices[i].Item1.Item1.Date.ToString("dd.MM.yy '/' H:mm")
                                </td>
                                <td><a href="ItemPriceChanges/@orderedItemPrices[i].Item2.Id">@orderedItemPrices[i].Item2.Name</a></td>
                                <td>
                                    @if (orderedItemPrices[i].Item1.Item2 != null)
                                    {
                                        @if (orderedItemPrices[i].Item1.Item1.ItemPrice <= orderedItemPrices[i].Item1.Item2.ItemPrice)
                                        {
                                            <span class="text-success">@orderedItemPrices[i].Item1.Item1.ItemPrice</span>
                                        }
                                        else
                                        {
                                            <span class="text-danger">@orderedItemPrices[i].Item1.Item1.ItemPrice</span>
                                        }
                                    }
                                    else
                                    {
                                        @orderedItemPrices[i].Item1.Item1.ItemPrice
                                    }
                                </td>
                                <td><a href="@orderedItemPrices[i].Item2.Url" target="_blank">@orderedItemPrices[i].Item2.Url</a></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Email { get; set; }

    private Tuple<Price, Price>[] lastPrices = null;
    private Item[] items = null;
    private Tuple<Tuple<Price, Price>, Item>[] orderedItemPrices = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (orderedItemPrices == null)
        {
            await LoadItems();

            await LoadLastPrices();

            orderItemPrices();

            this.StateHasChanged();
        }
    }

    async Task LoadItems()
    {
        try
        {
            items = (await itemsdb.GetItemsBySubscriberAsync(Email)).ToArray();
        }
        catch { }
    }

    async Task LoadLastPrices()
    {
        List<Tuple<Price, Price>> prices = new List<Tuple<Price, Price>>(items.Length);

        foreach (var item in items)
        {
            try
            {
                var last2Prices = await pricesdb.GetLastItemPricesAsync(item, 2);

                if (last2Prices.Count != 2)
                {
                    prices.Add(new Tuple<Price, Price>(last2Prices[0], null));
                }
                else
                {
                    prices.Add(new Tuple<Price, Price>(last2Prices[0], last2Prices[1]));
                }
            }
            catch { }
        }

        lastPrices = prices.ToArray();
    }

    void orderItemPrices()
    {
        orderedItemPrices = lastPrices.Join(items, price => price.Item1.ItemId, item => item.Id, (p, i) => new Tuple<Tuple<Price, Price>, Item>(p, i))
            .OrderByDescending(p => p.Item1.Item1.Date).ToArray();
    }
}
