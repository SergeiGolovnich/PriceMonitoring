@using PriceMonitorData
@inject ItemPriceRepository db
@using Microsoft.AspNetCore.Mvc.TagHelpers
<div class="row">
    <div class="col-12">
        <div class="card">

            @if (items == null)
            {
            <span class="text-secondary">Loading...</span>
            }
            else if (items.Length == 0)
            {
                <p><em>There is no items...</em></p>
                <a href="AddItem">Add New!</a>
            }
            else
            {
                <table class="table">
                    <thead class="card-header">
                        <tr>
                            <th>Item Name</th>
                            <th>URL</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody class="card-body">
                        @foreach (var item in items)
                        {
                            <tr>
                                <td><a href="ItemPriceChanges/@item.Id">@item.Name</a></td>
                                <td><a href="@item.Url" target="_blank">@item.Url</a></td>
                                <td>
                                    <ItemActions Item="@item" OnRemoveClick="@OnRemoveItem" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            </div>
        </div>
    </div>
@code {
    [Parameter]
    public string Email { get; set; }

    private Item[] items;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (items == null)
        {
            await LoadItems();
        }
    }

    async Task LoadItems()
    {
        try
        {
            items = (await db.GetItemsBySubscriber(Email)).ToArray();

            this.StateHasChanged();
        }
        catch { }
    }

    async Task OnRemoveItem(Item item)
    {
        try
        {
            var itemResponse = await db.RemoveSubscriberFromItem(item, Email);

            await LoadItems();
        }
        catch { }
    }
}
