@page "/AddItem"
@attribute [Authorize]

@using PriceMonitorData
@using PriceMonitorSites

@inject ItemPriceRepository db

<AuthorizeView>
    <Authorized>
        @{email = context.User.Identity.Name;}
    </Authorized>
</AuthorizeView>

<div class="row">
    <div class="col-12">
        <h3>Add Item To Monitor</h3>
        <div class="card">
            <div class="card-header">
                Available item slots: @if (freeItemSlots == null)
                {
                    @:Loading...
                }
                else
                {
                    @freeItemSlots
                }
            </div>
            <div class="card-body">
                <EditForm Model="@item" OnValidSubmit="@AddNewItem">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="ItemName" class="control-label">Item Name</label>
                        <InputText @bind-Value="@item.Name" class="form-control" id="ItemName" placeholder="Adam Audio T10S"></InputText>
                    </div>
                    <div class="form-group">
                        <label for="url" class="control-label">Url</label>
                        <InputText @bind-Value="@item.Url" class="form-control" id="url" placeholder="https://www.musik-produktiv.com/ru/sabvufery/adam-audio/"></InputText>
                    </div>

                    <div class="form-group">
                        <div class="form-group text-danger">@((MarkupString)Error)</div>
                        <div class="form-group text-success">@((MarkupString)Success)</div>
                        <ValidationSummary />
                        <div class="col-sm-offset-2 col-sm-10">
                            @if (freeItemSlots == null || freeItemSlots < 1)
                            {
                                <button class="btn btn-primary disabled" disabled>No Free Item Slots</button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-primary">Add</button>
                            }
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    private int? freeItemSlots { get; set; }
    private string email { get; set; }

    private string Error;
    private string Success;

    private Item item = new Item();

    private async Task AddNewItem()
    {
        Success = null;
        Error = null;

        item = new Item()
        {
            Id = Guid.NewGuid().ToString(),
            Name = item.Name,
            Url = item.Url,
            SubscribersEmails = new string[] { email }
        };

        try
        {
            item = await db.SearchItemByNameAndUrl(item.Name, item.Url);

            item = await db.AddSubscriberToItem(item, email);

            Success += $"Item {item.Name} successfully created!";

            freeItemSlots = await LoadFreeSlotsCount(email);

            return;
        }
        catch { }

        try
        {
            decimal price = await PriceParser.Parse(item);

            Success = $"Price successfully parsed: {price} rub. <br />";
        }
        catch
        {
            Error = "Error on parsing item price.";

            return;
        }

        try
        {
            item = await db.CreateItem(item.Name, item.Url, new string[] { email });
        }
        catch
        {
            Error = "Error on creating item.";

            return;
        }

        Success += $"Item {item.Name} successfully created!";

        item = new Item();

        freeItemSlots = await LoadFreeSlotsCount(email);
    }

    private async Task<int> LoadFreeSlotsCount(string email)
    {
        if (email == null)
        {
            return 0;
        }

        int maxSlots = int.Parse(EnvHelper.GetEnvironmentVariable("MaxItemsForUser"));

        int currentItemsCount = (await db.GetItemsBySubscriber(email)).Count;

        return maxSlots - currentItemsCount;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (freeItemSlots == null)
        {
            freeItemSlots = await LoadFreeSlotsCount(email);

            this.StateHasChanged();
        }
    }
}
